<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - User Management</title>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            /* Modern Color Palette */
            --primary-color: #7c3aed;
            --primary-dark: #6d28d9;
            --primary-light: #c4b5fd;
            --secondary-color: #06b6d4;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --text-primary: #1f2937;
            --text-secondary: #4b5563;
            --bg-primary: #f8fafc;
            --bg-secondary: #f1f5f9;
            --white: #ffffff;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
            
            /* Border Radius */
            --radius-sm: 0.375rem;
            --radius-md: 0.5rem;
            --radius-lg: 1rem;
            
            /* Transitions */
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            line-height: 1.6;
            color: var(--text-primary);
            background: linear-gradient(135deg, #f5f3ff 0%, #ede9fe 100%);
            min-height: 100vh;
        }

        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .dashboard-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding: 1rem 1.5rem;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-md);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .dashboard-nav h1 {
            color: var(--primary-color);
            margin: 0;
            font-size: 1.75rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .dashboard-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            overflow: hidden;
        }

        .card-header {
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e2e8f0;
        }

        .card-header h2 {
            margin: 0;
            color: var(--text-primary);
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            white-space: nowrap;
        }

        .table th,
        .table td {
            padding: 1rem 1.5rem;
            text-align: left;
        }

        .table th {
            background: var(--primary-light);
            color: var(--primary-dark);
            font-weight: 600;
            position: sticky;
            top: 0;
        }

        .table tr {
            border-bottom: 1px solid #e2e8f0;
        }

        .table tr:last-child {
            border-bottom: none;
        }

        .table tbody tr:hover {
            background: var(--bg-secondary);
        }

        .table td a {
            color: var(--primary-color);
            text-decoration: none;
            transition: var(--transition);
        }

        .table td a:hover {
            text-decoration: underline;
            color: var(--primary-dark);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.625rem 1.25rem;
            border: none;
            border-radius: var(--radius-md);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            gap: 0.375rem;
        }

        .btn i {
            font-size: 1em;
        }

        .btn-primary {
            background: var(--primary-color);
            color: var(--white);
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-danger {
            background: var(--danger-color);
            color: var(--white);
        }

        .btn-danger:hover {
            background: #dc2626;
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-success {
            background: var(--success-color);
            color: var(--white);
        }

        .btn-success:hover {
            background: #059669;
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .alert {
            padding: 1rem 1.5rem;
            border-radius: var(--radius-md);
            margin-bottom: 1.5rem;
            display: none;
            animation: slideIn 0.3s ease;
        }

        .alert-success {
            background: #dcfce7;
            color: #166534;
            border: 1px solid #86efac;
        }

        .alert-danger {
            background: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }

        .modal-content {
            background: var(--white);
            margin: 5% auto;
            padding: 2rem;
            border-radius: var(--radius-lg);
            max-width: 500px;
            position: relative;
            animation: slideDown 0.3s ease;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .modal-header h3 {
            margin: 0;
            color: var(--primary-color);
            font-size: 1.25rem;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-secondary);
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
        }

        .modal-close:hover {
            color: var(--danger-color);
            background: rgba(239, 68, 68, 0.1);
            transform: scale(1.1);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-primary);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #e2e8f0;
            border-radius: var(--radius-md);
            font-size: 1rem;
            transition: var(--transition);
            background: var(--white);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid #e2e8f0;
        }

        .deleted-row {
            opacity: 0.6;
            background-color: #f8f9fa;
        }

        .btn-restore {
            background-color: var(--success-color);
            color: white;
        }

        .btn-restore:hover {
            background-color: #059669;
        }

        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #4b5563;
        }

        .user-count {
            background: var(--primary-light);
            color: var(--primary-dark);
            padding: 0.25rem 0.75rem;
            border-radius: var(--radius-md);
            font-size: 0.875rem;
            font-weight: 600;
        }

        /* Animations */
        @keyframes slideIn {
            from {
                transform: translateY(-10px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideDown {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1rem;
            }

            .dashboard-nav {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
                padding: 1rem;
            }

            .dashboard-nav h1 {
                font-size: 1.5rem;
            }

            .table th,
            .table td {
                padding: 0.75rem 1rem;
            }

            .action-buttons {
                flex-direction: column;
                gap: 0.5rem;
            }

            .btn-sm {
                width: 100%;
            }

            .modal-content {
                margin: 10% 1rem;
                padding: 1.5rem;
            }
        }

        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            :root {
                --text-primary: #e5e7eb;
                --text-secondary: #9ca3af;
                --white: #1f2937;
            }

            body {
                background: linear-gradient(135deg, #4c1d95 0%, #5b21b6 100%);
            }

            .dashboard-nav, .dashboard-card {
                background: rgba(31, 41, 55, 0.9);
                border-color: rgba(55, 65, 81, 0.3);
            }

            .card-header, .modal-header, .modal-footer {
                border-color: #374151;
            }

            .table th {
                background: #4c1d95;
                color: #e5e7eb;
            }

            .table tr {
                border-color: #374151;
            }

            .table tbody tr:hover {
                background: #374151;
            }

            .form-control {
                background: #374151;
                border-color: #4b5563;
                color: var(--text-primary);
            }

            .deleted-row {
                background-color: #1f2937;
                opacity: 0.5;
            }

            .user-count {
                background: #4c1d95;
                color: #e5e7eb;
            }

            .modal-content {
                background: #1f2937;
            }

            .modal-close:hover {
                background: rgba(239, 68, 68, 0.2);
            }
        }

        /* Add styles for permanent delete button */
        .btn-permanent-delete {
            background: linear-gradient(135deg, #ff6b6b, #ee5253);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: var(--radius-md);
            cursor: pointer;
            transition: var(--transition);
            margin-left: 0.5rem;
        }

        .btn-permanent-delete:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(238, 82, 83, 0.3);
            background: linear-gradient(135deg, #ee5253, #dc2626);
        }

        .deleted-row td:first-child {
            color: #dc2626;
            text-decoration: line-through;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <nav class="dashboard-nav">
            <h1><i class="fas fa-users-cog"></i> User Dashboard</h1>
            <button class="btn btn-danger" onclick="handleLogout()">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </nav>

        <div class="dashboard-card">
            <div class="card-header">
                <h2><i class="fas fa-user-friends"></i> User Management <span id="userCount" class="user-count">0</span></h2>
                <div id="alert" class="alert" style="display: none;"></div>
            </div>
            
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Contact</th>
                            <th>Address</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="userTableBody">
                        <!-- User data will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-user-edit"></i> Edit User</h3>
                <button class="modal-close" onclick="closeModal()">&times;</button>
            </div>
            <form id="editForm" onsubmit="handleUpdate(event)">
                <input type="hidden" id="editUserId">
                <div class="form-group">
                    <label for="editUsername" class="form-label">Username</label>
                    <input type="text" id="editUsername" name="username" class="form-control" required minlength="3">
                </div>
                <div class="form-group">
                    <label for="editEmail" class="form-label">Email</label>
                    <input type="email" id="editEmail" name="email" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="editContact" class="form-label">Contact (10 digits)</label>
                    <input type="tel" id="editContact" name="contact" class="form-control" pattern="[0-9]{10}" title="Please enter exactly 10 digits" oninput="validateContact(this)">
                    <small class="error-message" id="editContactError" style="display: none; color: var(--danger-color);">Contact number must be exactly 10 digits</small>
                </div>
                <div class="form-group">
                    <label for="editAddress" class="form-label">Address</label>
                    <textarea id="editAddress" name="address" class="form-control" rows="3"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let users = [];

        // Load users when page loads
        document.addEventListener('DOMContentLoaded', loadUsers);

        async function loadUsers() {
            try {
                const response = await fetch('/api/users');
                if (response.ok) {
                    users = await response.json();
                    displayUsers();
                    updateUserCount();
                } else {
                    showAlert('Error loading users', 'danger');
                }
            } catch (error) {
                showAlert('Error loading users', 'danger');
            }
        }

        function displayUsers() {
            const tbody = document.getElementById('userTableBody');
            tbody.innerHTML = users.map(user => `
                <tr class="${user.is_deleted ? 'deleted-row' : ''}">
                    <td>${user.username || '<span style="color: #dc2626;">[DELETED]</span>'}</td>
                    <td>${user.email}</td>
                    <td>${user.contact ? `<a href="tel:${user.contact}" onclick="handleContactClick(event, '${user.contact}')">${user.contact}</a>` : '-'}</td>
                    <td>${user.address || '-'}</td>
                    <td class="action-buttons">
                        ${!user.is_deleted ? `
                            <button class="btn btn-primary btn-sm" onclick="openEditModal(${user.id})">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="handleDelete(${user.id})">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        ` : `
                            <button class="btn btn-success btn-sm" onclick="handleRestore(${user.id})">
                                <i class="fas fa-trash-restore"></i> Restore
                            </button>
                            <button class="btn btn-permanent-delete btn-sm" onclick="handlePermanentDelete(${user.id})">
                                <i class="fas fa-times-circle"></i> Delete Permanently
                            </button>
                        `}
                    </td>
                </tr>
            `).join('');
        }

        function updateUserCount() {
            const activeUsers = users.filter(user => !user.is_deleted).length;
            document.getElementById('userCount').textContent = activeUsers;
        }

        function handleContactClick(event, contact) {
            event.preventDefault();
            const confirmed = confirm(`Do you want to call ${contact}?`);
            if (confirmed) {
                window.location.href = `tel:${contact}`;
            }
        }

        function validateContact(input) {
            const contactError = document.getElementById('editContactError');
            if (input.value && !/^\d{10}$/.test(input.value)) {
                contactError.style.display = 'block';
                input.setCustomValidity('Contact number must be exactly 10 digits');
            } else {
                contactError.style.display = 'none';
                input.setCustomValidity('');
            }
        }

        function openEditModal(userId) {
            const user = users.find(u => u.id === userId);
            if (user) {
                document.getElementById('editUserId').value = user.id;
                document.getElementById('editUsername').value = user.username;
                document.getElementById('editEmail').value = user.email;
                document.getElementById('editContact').value = user.contact || '';
                document.getElementById('editAddress').value = user.address || '';
                document.getElementById('editModal').style.display = 'block';
            }
        }

        function closeModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        async function handleUpdate(event) {
            event.preventDefault();
            const userId = document.getElementById('editUserId').value;
            const formData = {
                username: document.getElementById('editUsername').value,
                email: document.getElementById('editEmail').value,
                contact: document.getElementById('editContact').value,
                address: document.getElementById('editAddress').value
            };

            // Validate contact number
            if (formData.contact && !/^\d{10}$/.test(formData.contact)) {
                showAlert('Contact number must be exactly 10 digits', 'danger');
                return;
            }

            try {
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    showAlert('User updated successfully', 'success');
                    closeModal();
                    loadUsers();
                } else {
                    showAlert(data.error || 'Update failed', 'danger');
                }
            } catch (error) {
                showAlert('Error updating user', 'danger');
            }
        }

        async function handleDelete(userId) {
            if (!confirm('Are you sure you want to delete this user?')) {
                return;
            }

            try {
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showAlert('User deleted successfully', 'success');
                    loadUsers();
                } else {
                    const data = await response.json();
                    showAlert(data.error || 'Delete failed', 'danger');
                }
            } catch (error) {
                showAlert('Error deleting user', 'danger');
            }
        }

        async function handleRestore(userId) {
            try {
                const response = await fetch(`/api/users/${userId}/restore`, {
                    method: 'POST'
                });

                if (response.ok) {
                    showAlert('User restored successfully', 'success');
                    loadUsers();
                } else {
                    const data = await response.json();
                    showAlert(data.error || 'Restore failed', 'danger');
                }
            } catch (error) {
                showAlert('Error restoring user', 'danger');
            }
        }

        async function handlePermanentDelete(userId) {
            if (!confirm('Are you sure you want to permanently delete this user? This action cannot be undone and will completely remove all user data!')) {
                return;
            }

            try {
                const response = await fetch(`/api/users/${userId}/permanent`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // Remove from local array
                    users = users.filter(user => user.id !== userId);
                    displayUsers();
                    updateUserCount();
                    showAlert('User permanently deleted', 'success');
                } else {
                    const data = await response.json();
                    showAlert(data.error || 'Delete failed', 'danger');
                }
            } catch (error) {
                showAlert('Error deleting user permanently', 'danger');
                console.error(error);
            }
        }

        async function handleLogout() {
            try {
                const response = await fetch('/api/logout', {
                    method: 'POST'
                });

                if (response.ok) {
                    window.location.href = '/login';
                } else {
                    showAlert('Logout failed', 'danger');
                }
            } catch (error) {
                showAlert('Error during logout', 'danger');
            }
        }

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alert.style.display = 'block';
            
            if (type === 'success') {
                setTimeout(() => {
                    alert.style.display = 'none';
                }, 3000);
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>

